一、普通 BIO
Client.java  BioServer.java
客户端：创建20个Socket并连接到服务器上，再创建20个线程，每个线程负责一个Socket。
服务器端：接收到这20个连接，创建20个Socket，接着创建20个线程，每个线程负责一个Socket。
为了模拟服务器端的Socket在创建后不能立马读取数据，让客户端的20个线程分别休眠5-10之间的一个随机秒数。
客户端的20个线程会在第5秒到第10秒这段时间内陆陆续续的向服务器端发送数据，服务器端的20个线程也会陆陆续续接收到数据
缺点：
1. 多个客户端同时发起请求时，服务器端要创建很多的线程，可能会因为超过了上限而造成崩溃。
2. 每个线程的大部分时光中都是在阻塞着，无事可干，造成极大的资源浪费。
适用场景：
一对一的模型，主要体现在“专用”上或“私有”上。

二、多路复用 NIO
BioServer.java
定义：在通信方面，多种信号或数据（从宏观上看）交织在一起，使用同一条传输通道进行传输。面向事件（OP_ACCEPT、OP_READ）编程
一方面充分利用通道的传输能力，另一方面节省资源、提高效率。
示例中，可采用两个选择器分别在不同线程中处理OP_ACCEPT、OP_READ操作；对于非常耗时的work线程，使用work线程池来处理。
这种处理模式就是被称为的多路复用I/O，多路指的是多个Socket通道，复用指的是只用一个线程来管理它们。一对多的模型。

三、Java AIO
AioServer.java

参考：https://www.cnblogs.com/lixinjie/p/a-post-tell-clearly-about-io-multiplexing-and-async-io.html